# Generated by Django 3.0.4 on 2020-03-09 14:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'Пользователь с таким логином уже существует.'}, max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='Логин')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='Отчество')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким email уже существует.'}, max_length=254, unique=True, verbose_name='Email')),
                ('date_of_birth', models.DateField(verbose_name='Дата рождения')),
                ('gender', models.CharField(choices=[('M', 'Мужской'), ('F', 'Женский')], max_length=2, verbose_name='Пол')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Consultation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Наименование')),
                ('date_create', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('date_provision', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата предоставления')),
                ('date_finish', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата окончания')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=30, verbose_name='Стоимость')),
                ('status', models.CharField(choices=[('process', 'В процессе'), ('done', 'Выполнено'), ('cancel', 'Отменено')], max_length=20, verbose_name='Статус заказа')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalCenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Наименование')),
                ('address', models.CharField(max_length=150, verbose_name='Адрес')),
                ('rate', models.FloatField(verbose_name='Рейтинг')),
                ('description', models.TextField(null=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Медицинский центр',
                'verbose_name_plural': 'Медицинские центры',
            },
        ),
        migrations.CreateModel(
            name='Expert',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('rate', models.FloatField(verbose_name='Рейтинг')),
            ],
            options={
                'verbose_name': 'Эксперт',
                'verbose_name_plural': 'Эксперты',
            },
            bases=('med_expert.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Наименование')),
                ('date_create', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('date_provision', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата предоставления')),
                ('date_finish', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата окончания')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=30, verbose_name='Стоимость')),
                ('status', models.CharField(choices=[('process', 'В процессе'), ('done', 'Выполнено'), ('cancel', 'Отменено')], max_length=20, verbose_name='Статус заказа')),
                ('medical_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='med_expert.MedicalCenter', verbose_name='Медицинское учреждение')),
            ],
        ),
        migrations.AddIndex(
            model_name='medicalcenter',
            index=models.Index(fields=['name'], name='med_expert__name_edb815_idx'),
        ),
        migrations.AddField(
            model_name='consultation',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client', to=settings.AUTH_USER_MODEL, verbose_name='Клиент'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='consultation',
            name='expert',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expert', to='med_expert.Expert', verbose_name='Эксперт'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username', 'first_name', 'last_name', 'middle_name'], name='med_expert__usernam_7d1bab_idx'),
        ),
    ]
